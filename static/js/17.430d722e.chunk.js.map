{"version":3,"file":"static/js/17.430d722e.chunk.js","mappings":"gSAEaA,EAAiBC,EAAAA,GAAAA,GAAH,4PAYdC,EAAiBD,EAAAA,GAAAA,GAAH,oRAYdE,EAAQF,EAAAA,GAAAA,IAAH,4IAOLG,EAAWH,EAAAA,GAAAA,GAAH,mE,SC0BrB,EApDa,WACX,OAAkCI,EAAAA,EAAAA,UAAS,CAAC,GAA5C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAiBR,OAfAE,EAAAA,EAAAA,YAAU,WACR,GAAKF,EAAL,CACA,IAAMG,EAAc,mCAAG,WAAMC,GAAN,uFAEnBL,GAAW,GAFQ,UAGSM,EAAAA,EAAAA,IAAeD,GAHxB,OAGbE,EAHa,OAInBT,EAAaS,GAJM,gDAMnBC,QAAQC,IAAR,MANmB,yBAQnBT,GAAW,GARQ,4EAAH,sDAWpBI,EAAeH,EAZK,CAarB,GAAE,CAACA,KAEF,gCACGF,IACC,SAAC,KAAD,CACEW,OAAO,KACPC,MAAM,KACNC,OAAO,IACPC,MAAM,UACNC,UAAU,qBACVC,aAAc,CAAC,EACfC,iBAAiB,GACjBC,SAAS,KAGH,OAATpB,QAAS,IAATA,OAAA,EAAAA,EAAWqB,QAAS,IAAK,uBAAG,6BACnB,OAATrB,QAAS,IAATA,OAAA,EAAAA,EAAWqB,QAAS,IACnB,SAAC3B,EAAD,iBACGM,QADH,IACGA,OADH,EACGA,EAAWsB,KAAI,SAAAC,GACd,OACE,UAAC3B,EAAD,YACE,SAACC,EAAD,CAAO2B,KAAKC,EAAAA,EAAAA,GAAUF,EAAMG,cAAeC,IAAKJ,EAAMK,QACtD,SAAC9B,EAAD,UAAWyB,EAAMK,QACjB,uBAAIL,EAAMM,cAHSN,EAAMO,QAM9B,QAKV,C,+LCzDKC,EAAM,gCACNC,EAAU,mCAEVC,EAAiB,mCAAG,oGACDC,EAAAA,EAAAA,IAAA,UAAaH,EAAb,oCAA4CC,IAD3C,cAClBG,EADkB,OAExBxB,QAAQC,IAAIuB,EAASC,KAAKC,SAFF,kBAGjBF,EAASC,KAAKC,SAHG,2CAAH,qDAMjBC,EAAS,mCAAG,WAAMC,GAAN,uFACOL,EAAAA,EAAAA,IAAA,UAClBH,EADkB,gCACSC,EADT,kBAC0BO,IAFjC,cACVJ,EADU,yBAKTA,EAASC,KAAKC,SALL,2CAAH,sDAQTG,EAAe,mCAAG,WAAMpC,GAAN,uFACC8B,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iBAAyB3B,EAAzB,oBAA4C4B,IAD7C,cAChBG,EADgB,yBAGfA,EAASC,MAHM,2CAAH,sDAMf3B,EAAc,mCAAG,WAAML,GAAN,uFACE8B,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACN3B,EADM,4BACqB4B,IAFvB,cACfG,EADe,yBAKdA,EAASC,KAAKK,MALA,2CAAH,sDAQdC,EAAS,mCAAG,WAAMtC,GAAN,uFACO8B,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACN3B,EADM,4BACqB4B,IAF5B,cACVG,EADU,OAKhBxB,QAAQC,IAAI,SAAUuB,EAASC,KAAKC,SALpB,kBAMTF,EAASC,KAAKC,SANL,2CAAH,qD,uHC/BR,SAASZ,EAAUkB,GACxB,OAAIA,EACI,kCAAN,OAAyCA,GAElCC,CAEV,C","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/api.js","services/getImage.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledCastList = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));\n  grid-gap: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin: 20px;\n`;\n\nexport const StyledCastItem = styled.li`\n  padding: 5px;\n  border-radius: 4px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n  &:hover,\n  &:focus {\n    transform: scale(1.03);\n    cursor: zoom-in;\n  }\n`;\n\nexport const Image = styled.img`\n  width: 100%;\n  height: auto;\n  object-fit: cover;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n`;\n\nexport const CastName = styled.h3`\n  margin-top: 5px;\n  margin-bottom: 5px;\n`;","import { useEffect, useState } from 'react';\nimport { ThreeDots } from 'react-loader-spinner';\nimport { useParams } from 'react-router-dom';\nimport { getCastDetails } from 'services/api';\nimport { getPoster } from 'services/getImage';\nimport { CastName, Image, StyledCastItem, StyledCastList } from './Cast.styled';\n\nconst Cast = () => {\n  const [movieCast, setMovieCast] = useState({});\n  const [loading, setLoading] = useState(false);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (!movieId) return;\n    const fetchMovieCast = async id => {\n      try {\n        setLoading(true);\n        const movieCastData = await getCastDetails(id);\n        setMovieCast(movieCastData);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMovieCast(movieId);\n  }, [movieId]);\n  return (\n    <>\n      {loading && (\n        <ThreeDots\n          height=\"80\"\n          width=\"80\"\n          radius=\"9\"\n          color=\"#3f51b5\"\n          ariaLabel=\"three-dots-loading\"\n          wrapperStyle={{}}\n          wrapperClassName=\"\"\n          visible={true}\n        />\n      )}\n      {movieCast?.length < 1 && <p>No info about castomers</p>}\n      {movieCast?.length > 0 && (\n        <StyledCastList>\n          {movieCast?.map(casts => {\n            return (\n              <StyledCastItem key={casts.cast_id}>\n                <Image src={getPoster(casts.profile_path)} alt={casts.name} />\n                <CastName>{casts.name}</CastName>\n                <p>{casts.character}</p>\n              </StyledCastItem>\n            );\n          })}\n        </StyledCastList>\n      )}\n    </>\n  );\n};\nexport default Cast;","import axios from 'axios';\nconst URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '6da8758eb40e221013709d63079fd9c4';\n\nconst getTrandingMovies = async () => {\n  const response = await axios.get(`${URL}trending/all/day?api_key=${API_KEY}`);\n  console.log(response.data.results);\n  return response.data.results;\n};\n\nconst getMovies = async query => {\n  const response = await axios.get(\n    `${URL}search/movie?api_key=${API_KEY}&query=${query}`\n  );\n\n  return response.data.results;\n};\n\nconst getMovieDetails = async movieId => {\n  const response = await axios.get(`${URL}movie/${movieId}?api_key=${API_KEY}`);\n\n  return response.data;\n};\n\nconst getCastDetails = async movieId => {\n  const response = await axios.get(\n    `${URL}movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n\n  return response.data.cast;\n};\n\nconst getReview = async movieId => {\n  const response = await axios.get(\n    `${URL}movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n\n  console.log('review', response.data.results);\n  return response.data.results;\n};\n\nexport {\n  getTrandingMovies,\n  getMovies,\n  getMovieDetails,\n  getCastDetails,\n  getReview,\n};","import noPoster from '../images/No_image_poster.png';\nexport function getPoster(poster) {\n  if (poster) {\n    return `https://image.tmdb.org/t/p/w300${poster}`;\n  } else {\n    return noPoster;\n  }\n}"],"names":["StyledCastList","styled","StyledCastItem","Image","CastName","useState","movieCast","setMovieCast","loading","setLoading","movieId","useParams","useEffect","fetchMovieCast","id","getCastDetails","movieCastData","console","log","height","width","radius","color","ariaLabel","wrapperStyle","wrapperClassName","visible","length","map","casts","src","getPoster","profile_path","alt","name","character","cast_id","URL","API_KEY","getTrandingMovies","axios","response","data","results","getMovies","query","getMovieDetails","cast","getReview","poster","noPoster"],"sourceRoot":""}